{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/Login/Login.js","components/App/App.js","index.js","registerServiceWorker.js"],"names":["accessToken","expiresIn","spotifyUrl","concat","Spotify","loggedIn","tokenRegex","RegExp","userName","undefined","checkAccessToken","window","location","href","match","urlAccessToken","urlExpiresIn","setTimeout","history","pushState","getAccessToken","getLoggedOut","assign","getUserName","_getUserName","Object","asyncToGenerator","regenerator_default","a","mark","_callee","headers","wrap","_context","prev","next","console","log","Authorization","fetch","then","response","json","jsonResponse","display_name","sent","stop","apply","this","arguments","search","term","searchUrl","replace","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","playlistId","createPlaylistUrl","method","body","JSON","stringify","addPlaylistTracksUrl","uris","SearchBar","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","handleTermChange","onSearch","event","setState","target","value","react_default","createElement","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","onAdd","onRemove","renderAction","TrackList","components_Track_Track","key","SearchResults","components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","onSave","Login","handleClick","src","App","playlistName","playlistTracks","updatePlaylistName","find","playlistTrack","prevState","toConsumableArray","removedTrack","_this2","index","indexOf","filter","_","i","_this3","components_Login_Login","components_SearchBar_SearchBar","components_SearchResults_SearchResults","components_Playlist_Playlist","ReactDOM","render","components_App_App","document","getElementById","navigator","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error"],"mappings":"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","file":"static/js/main.92168cb8.chunk.js","sourcesContent":["const clientId = \"25186fdc28194408a0165e48a92f065c\";\nconst redirectUri = \"http://a-roy.me/jamming\";\nconst spotifyUrl = `https://accounts.spotify.com/authorize?response_type=token&scope=playlist-modify-public&scope=user-read-email&client_id=${clientId}&redirect_uri=${redirectUri}`;\nlet accessToken;\nlet expiresIn;\nconst Spotify = {\n  loggedIn: true,\n  tokenRegex: new RegExp(\"access_token\"),\n  userName: undefined,\n  checkAccessToken() {\n    //if the URL contain access_token we are considered logged in\n    if (window.location.href.match(Spotify.tokenRegex) !== null) {\n      Spotify.loggedIn = true;\n    } else {\n      Spotify.loggedIn = false;\n    }\n    //Searching for an access_token into the current URL if it has not been already defined\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n    //if accessToken has not yet been found\n    if (accessToken === undefined) {\n      //but only if the URL contains it\n      if (urlAccessToken && urlExpiresIn) {\n        //defining token and expiration time\n        accessToken = urlAccessToken[1];\n        expiresIn = urlExpiresIn[1];\n        window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      }\n    } //else means we have defined an access token through getAccessToken\n    else {\n      return accessToken;\n    }\n  },\n\n  getAccessToken() {\n    //If check AccesToken\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessToken === undefined) {\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken[1];\n        expiresIn = urlExpiresIn[1];\n        window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      } else {\n        window.location = spotifyUrl;\n      }\n    } else {\n      return accessToken;\n    }\n  }, // End of getAccessToken\n  getLoggedOut() {\n    Spotify.loggedIn = false;\n    accessToken = undefined;\n    expiresIn = undefined;\n    window.location.assign(\"https://accounts.spotify.com/logout\");\n  },\n  async getUserName() {\n    console.log(\"get user name fires\");\n    const userUrl = \"https://api.spotify.com/v1/me\";\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userName = undefined;\n    userName = await fetch(userUrl, {\n      headers: headers\n    })\n      .then(response => response.json())\n      .then(jsonResponse => (userName = jsonResponse.display_name))\n      .then(() => {\n        console.log(\"userName \" + userName);\n\n        return (Spotify.userName = userName);\n      });\n  },\n  search(term) {\n    const searchUrl = `https://api.spotify.com/v1/search?type=track&q=${term.replace(\n      \" \",\n      \"%20\"\n    )}`;\n    return fetch(searchUrl, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    })\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (!jsonResponse.tracks) return [];\n        return jsonResponse.tracks.items.map(track => {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          };\n        });\n      });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris || trackUris.length === 0) return;\n    const userUrl = \"https://api.spotify.com/v1/me\";\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId = undefined;\n    let playlistId = undefined;\n    fetch(userUrl, {\n      headers: headers\n    })\n      .then(response => response.json())\n      .then(jsonResponse => (userId = jsonResponse.id))\n      .then(() => {\n        console.log(\"userID \" + userId);\n        const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n        fetch(createPlaylistUrl, {\n          method: \"POST\",\n          headers: headers,\n          body: JSON.stringify({\n            name: name\n          })\n        })\n          .then(response => response.json())\n          .then(jsonResponse => (playlistId = jsonResponse.id))\n          .then(() => {\n            const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n            fetch(addPlaylistTracksUrl, {\n              method: \"POST\",\n              headers: headers,\n              body: JSON.stringify({\n                uris: trackUris\n              })\n            });\n          });\n      });\n  }\n};\n\nexport default Spotify;\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { term: \"\" };\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n  handleTermChange(event) {\n    this.setState({ term: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input onChange={this.handleTermChange} placeholder=\"Type...\" />\n        <button onClick={this.search}>Search</button>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport \"./Track.css\";\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  renderAction() {\n    if (this.props.onAdd) {\n      return (\n        <a className=\"Track-action\" onClick={this.addTrack}>\n          +\n        </a>\n      );\n    } else {\n      return (\n        <a className=\"Track-action\" onClick={this.removeTrack}>\n          -\n        </a>\n      );\n    }\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>\n            {this.props.track.artist} | {this.props.track.album}\n          </p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n\nexport default Track;\n","import React from \"react\";\nimport Track from \"../Track/Track\";\nimport \"./TrackList.css\";\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {this.props.tracks.map(track => (\n          <Track\n            key={track.id}\n            track={track}\n            onRemove={this.props.onRemove}\n            onAdd={this.props.onAdd}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default TrackList;\n","import React from \"react\";\nimport TrackList from \"../TrackList/TrackList\";\nimport \"./SearchResults.css\";\n\nclass SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from \"react\";\nimport TrackList from \"../TrackList/TrackList\";\nimport \"./Playlist.css\";\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input\n          defaultValue={this.props.name}\n          onChange={this.handleNameChange}\n        />\n        <TrackList tracks={this.props.tracks} onRemove={this.props.onRemove} />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>\n          SAVE TO SPOTIFY\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;\n","import React from \"react\";\nimport Spotify from \"../../util/Spotify\";\nimport \"./login.css\";\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: \"Jean Pate\"\n    };\n  }\n  async componentDidMount() {\n    await Spotify.getUserName();\n    this.setState({\n      userName: Spotify.userName\n    });\n    console.log(this.state.userName);\n  }\n  render() {\n    if (Spotify.loggedIn === true) {\n      return (\n        <div>\n          <div className=\"spotify-welcome\">Welcome {this.state.userName}</div>\n          <button className=\"spotify-style\" onClick={this.props.handleClick}>\n            Log Out{\" \"}\n            <img\n              className=\"spotify-logo\"\n              src=\"./img/Spotify_Icon_RGB_Green.png\"\n            />\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <button className=\"spotify-style\" onClick={this.props.handleClick}>\n          Login with\n          <img\n            className=\"spotify-logo\"\n            src=\"./img/Spotify_Logo_RGB_Green.png\"\n          />\n        </button>\n      );\n    }\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport Spotify from \"../../util/Spotify\";\n\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Playlist from \"../Playlist/Playlist\";\nimport \"./App.css\";\nimport Login from \"../Login/Login\";\n\nSpotify.checkAccessToken();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: \"John Doe\",\n      searchResults: [],\n      playlistName: \"Name your playlist\",\n      playlistTracks: [],\n      loggedIn: false\n    };\n    //Binding methods\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  addTrack(track) {\n    if (\n      !this.state.playlistTracks.find(\n        playlistTrack => playlistTrack.id === track.id\n      )\n    ) {\n      this.setState(prevState => ({\n        playlistTracks: [...prevState.playlistTracks, track]\n      }));\n    }\n  }\n\n  removeTrack(removedTrack) {\n    let index = this.state.playlistTracks.indexOf(removedTrack);\n    this.setState(() => ({\n      playlistTracks: this.state.playlistTracks.filter((_, i) => i !== index)\n    }));\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(\n      playlistTrack => playlistTrack.uri\n    );\n    Spotify.savePlaylist(this.state.playlistName, trackUris);\n    this.setState({\n      searchResults: []\n    });\n    this.updatePlaylistName(\"My playlist\");\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults =>\n      this.setState({\n        searchResults: searchResults\n      })\n    );\n  }\n  handleClick() {\n    if (Spotify.loggedIn !== true) {\n      Spotify.getAccessToken();\n    } else {\n      Spotify.getLoggedOut();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <Login\n            handleClick={this.handleClick}\n            userName={this.state.userName}\n          />\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            <Playlist\n              name={this.state.playlistName}\n              tracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}